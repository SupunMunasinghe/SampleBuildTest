name: Trigger Local Jenkins Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
    
env:
    JENKINS_TOKEN: ${{ secrets.JENKINS_ACCESS_TOKEN }}
    JENKINS_URL: http://localhost:8080
    JENKINS_USERNAME: exvbuild
    JENKINS_JOB_NAME: CMake_Build
    GIT_PR_ACCESS_TOKEN : ${{ secrets.PR_ACCESSS_TOKEN }}

jobs:
  build:
    runs-on: self-hosted   # Runs on Jenkins server
    steps:
      - name: Trigger Jenkins Job
        id: trigger
        
        run: |
          echo "Triggering Jenkins job from GitHub Actions..."
          echo "Call jenkins Request : ${{ github.head_ref }}"

          ## Post Request to Build with pull request branch
          curl -X POST \
          "${JENKINS_URL}/job/${JENKINS_JOB_NAME}/buildWithParameters?BRANCH_NAME=${{ github.head_ref }}" \
          --user "${JENKINS_USERNAME}:${JENKINS_TOKEN}"
            

      - name: Wait for Jenkins Job To Complete
        id: trigger_status
        run: |
          echo "Waiting for Jenkins job to complete..."
          MAX_ATTEMPTS=10
          SLEEP_SECONDS=5
          NEXT_BUILD_WAIT_SECONDS=2
          COUNTER=0

          # Call Jenkins to check the latest build 
          LATEST_BUILD=$(curl -u ${JENKINS_USERNAME}:${JENKINS_TOKEN} "${JENKINS_URL}/job/${JENKINS_JOB_NAME}/lastBuild/api/json")
          LATEST_BUILD_URL=$(python3 -c "import sys, json; print(json.loads(sys.argv[1])['url'])" "$LATEST_BUILD")
          echo "Latest Build URL in Jenkins Waiting job: $LATEST_BUILD_URL"

          # Wait until build has started
          while true; do
            BUILD_INFO=$(curl -s -u ${JENKINS_USERNAME}:${JENKINS_TOKEN} \
            "${LATEST_BUILD_URL}api/json")
            
            NEXT_BUILD=$(python3 -c "import sys, json; print(json.loads(sys.argv[1])['nextBuild'])" "$BUILD_INFO")

            if [[ "$NEXT_BUILD" == None ]]; then
              echo "Next build is loading..."
            else
              LATEST_BUILD_URL=$(python3 -c "import sys,ast; print(ast.literal_eval(sys.argv[1])['url'])" "$NEXT_BUILD")
              break
            fi
            sleep $NEXT_BUILD_WAIT_SECONDS
          done
          echo "build_url=$LATEST_BUILD_URL" >> $GITHUB_OUTPUT #set Latest Build URL in Github Output

          # Check the started build status
          while true; do
            BUILD_INFO=$(curl -s -u ${JENKINS_USERNAME}:${JENKINS_TOKEN} \
            "${LATEST_BUILD_URL}api/json")

            STATUS=$(python3 -c "import sys, json; print(json.loads(sys.argv[1])['result'])" "$BUILD_INFO")
            BUILDING=$(python3 -c "import sys, json; print(json.loads(sys.argv[1])['building'])" "$BUILD_INFO")

            echo "Build Status $STATUS"
            echo "Is Building $BUILDING"

            if [[ "$BUILDING" == True ]]; then
              echo "Build is still running..."
            elif [[ "$STATUS" == "SUCCESS" ]]; then
              echo "Jenkins build succeeded!"
              echo "build_status=$STATUS" >> $GITHUB_OUTPUT #set Latest Build Status in Github Output
              break
            elif [[ "$STATUS" == "FAILURE" ]]; then
              echo "Jenkins build failed!"
              echo "build_status=$STATUS" >> $GITHUB_OUTPUT #set Latest Build Status in Github Output
              break
            elif [[ "$STATUS" == "ABORTED" ]]; then
              echo "Jenkins build aborted!"
              echo "build_status=$STATUS" >> $GITHUB_OUTPUT #set Latest Build Status in Github Output
              break
            else
              echo "Unknown status: $STATUS"
              exit 1
            fi
          
            COUNTER=$((COUNTER+1))
            if [[ $COUNTER -ge $MAX_ATTEMPTS ]]; then
              echo "Timed out waiting for Jenkins build."
              exit 1
            fi
          
            sleep $SLEEP_SECONDS
          done

      - name: Notify GitHub PR
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "Posting build status to PR..."
          BUILD_CONSOLE_OUTPUT=$(curl -s -u ${JENKINS_USERNAME}:${JENKINS_TOKEN} \
            "${{ steps.trigger_status.outputs.build_url }}consoleText" > console.txt)
          COMMENT_BODY=$(printf "**Jenkins Build Console Output (truncated)**\n\n%s" "$(head -n 1000 console.txt)")

          # Escape backslashes, double quotes, and newlines for JSON
          JSON_BODY=$(printf '%s' "$COMMENT_BODY" | python3 -c 'import json,sys; print(json.dumps(sys.stdin.read()))')

          #echo "Console Output : ${BUILD_CONSOLE_OUTPUT}"
          #Comment the consoleText in a comment
          echo "PR URL : https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
          echo "PR JSON Body : ${JSON_BODY}"

          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GIT_PR_ACCESS_TOKEN}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" \
            -d "{\"body\":$JSON_BODY}"

          BUILD_STATUS=${{ steps.trigger_status.outputs.build_status }}
          echo "Build Status : ${BUILD_STATUS}"
          if [[ "$STATUS" != "SUCCESS" ]]; then
            exit 1


          
